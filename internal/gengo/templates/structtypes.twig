package {{ package_name }}

import "encoding/json"

// {{ type_name }} see : {{ type_url }}
type {{ type_name }} struct {
	{% if parent_type_name %}
		{{ parent_type_name }}
	{% endif %}

	typeContext

	{% for field in fields %}
		{{ field.external_ref }}
		{{ field.comment }}
		{{ field.types_comment }}
		{{ field.name }} {{ field.go_type }} `json:"{{ field.json_name }},omitempty"`
	{% endfor %}
}

func (v {{ type_name }}) intoMap(intop *map[string]interface{}) error {
	if intop == nil {
		return nil
	}

	{% if parent_type_name %}
		v.{{ parent_type_name }}.intoMap(intop)
	{% endif %}

	into := *intop

	{% for field in fields %}
		{{ '{' }}
		var value interface{} = v.{{ field.name }}
		if len(v.{{ field.name }}) == 1 {
			value = v.{{ field.name }}[0]
		}

		b, err := json.Marshal(value)
		if err != nil {
			return err
		}

		if len(b) > 0 && string(b) != "null" {
			into["{{ field.json_name }}"] = json.RawMessage(b)
		}
		{{ '}' }}
	{% endfor %}

	*intop = into

	return nil
}

func (v {{ type_name }}) asMap() (map[string]interface{}, error) {
	data := map[string]interface{}{}
	err := v.intoMap(&data)
	if err != nil {
		return nil, err
	}

	data["@context"] = "http://schema.org"
	data["@type"] = "{{ type_name }}"

	return data, nil
}

func (v {{ type_name }}) MarshalJSON() ([]byte, error) {
	data, err := v.asMap()
	if err != nil {
		return nil, err
	}

	return json.Marshal(data)
}
