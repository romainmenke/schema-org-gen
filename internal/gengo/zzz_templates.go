// Code generated by "esc -o zzz_templates.go -pkg gengo templates"; DO NOT EDIT.

package gengo

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	return nil, nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/templates/datatypes.twig": {
		local:   "templates/datatypes.twig",
		size:    509,
		modtime: 1526196205,
		compressed: `
H4sIAAAAAAAC/5SRUWvyMBSGr3t+xSHwQQLaVC/kQ9jdGDjYvFB2sTkkc6ea2aQlOXWI9L+PVud0d7tr
k+d5X3hTmdXWrAkPBzx9Lr1xhE0DYF1VBkYJicgdC0gEW0cCFIDWeGvY4HxfUcRIhGPcMFdxrHVcbciZ
tAxr3TIt8i3QGSKfftqtrejdHtH2T09m0+X/UTYA3ld0FNrKdG4dAeS1X6HcdecKH0yIG1Pcz6aPUqF8
eX3bM/WQQiiDwgMkNv+R5U6lk/hMoZTdXRKI6+DxaEnh66IQqofeFpA0AMlHLP2TKWrC8Q3mjtNZFazn
XIqF+BcXQvSuw+/K4AxLMcyyUT8b9LOhUAp+1ZxDT03NeZc25s/bdNLFPlrjVc7FQ3RAJ3ZE5GD9Gr4C
AAD//ypkTbD9AQAA
`,
	},

	"/templates/example.twig": {
		local:   "templates/example.twig",
		size:    1239,
		modtime: 1526200401,
		compressed: `
H4sIAAAAAAAC/5yTQWvcPBCGz9avmG8OH3bx2pscejAEUpr2UGgbSG+lBK137FWyHhlpXBKM/3uRV1m2
mw0sBYMlJL3vzDMzva4fdUswjhCX96w7gmm6F/KilOl66wRSlSBxbdeG2/LBW0aVYNNJ+InpCJVKsDWy
GVZFbbvS2U4b7ogfqfT1hjq9sK5dtMTlaytUmVLNwDV8etJdv6UPxm0NU5rBqJKyhI+OtBBoBrt6oFrA
NiAbgto6F7Y/nntSid69gurqRDpF1BwnNUvekYC3HUHvbE9ODPm9QvEtvLmCn7+8OMPtiHdDTw7uLJsa
g0BjBw4obrRQDuRcMA0cilvtPKV4uVy+XywvFstLzCHsLubdBWYqMc384r8rYLMNGSa9ZlOn5Fymkkkl
a+O93Q5iLJ9vcLmYv3MMdgBC8vLckwcmWoNYWBHU2ktY4okqwW/tjGY5APX5gMMM7AT4cBZieOMoPWSZ
5TOAF/mbv0H8q8MRz53JDOGGmtAxGpi80Dq2V6wvzdD/P6F6S85bHqf9xdcd88VuGKcjUuTmO+/ellTJ
i2QMcrWvfpi64qt2fqO3aZQ9q9hNJ8WtMyxbTnfhpassm/P/Pkg/SAUjXteWhZ4EK9yI9FUZx7awrsUc
r0OnYIVxijDHI6hYHTZhjjELrM6W3hHAHAMSrCLBqBT7Y+fyMkv7q0fjOak/AQAA///m1F8l1wQAAA==
`,
	},

	"/templates/structtypes.twig": {
		local:   "templates/structtypes.twig",
		size:    1467,
		modtime: 1531116330,
		compressed: `
H4sIAAAAAAAC/4yU32vbMBDHn6W/4mpoG5dgd6+BjMHeBt1ge9hDCK7inB1ttmRk2Wsx/t/HSYrzo2bd
U+S7k+77/dyRRuS/RYkwDBCOmRI1wjhyLutGGwsRqlzvpSrTX61WEedpSuX2tZlqoUWE1RTtTEUP0Plt
pTVdbmHgnFH8s1YWXyznbLiFQhtohEFlQapwauF25IylKfyU9gCN0Q0aK7GFwuja66a6ZF7PeTLIosdc
O1R76ng7nroXEqs9NXeH0HsY/GeCLxaNElVmsPAvTalc1zXpvoxS2zabzx2lToFSZ47YOMIzkV5FU4o+
j96WupYW68a+Rs9XNkbOi07lsOivsccgldVPolnQbwMPtWg2rTVSlVupLJpC5DiMMaAx2sDAmSzAl67X
oGRFIWbQdkbRJ2cBmiwC4uzUzkHrk4l+dq4kuRASHx3Iws+BorBaw4NLvz+Y++Hec+2FgV5UHcKZH1iD
03FBnDMyV6FavM3FZPeDM8v8a3MvbB63nDkCbLckZKSYZpQ8CdMeRLVwd2PfifI3J4hHimjM8ZEgZxfD
R3iEuzvwk6HAzRoi1VVV5O8Slc38XkRbCCK+iz9P2LaixMUudj08qtGjutr8hzBmN27Oz4f8r30SLQ0x
hsX8Ji39JsUkey+sIELzlcPIWUDYT8txR3diPoPvJG/pEZIHqt5En3L/Z+JIRAdrm1WatvkBa5FoU0ZT
HTnxRVe2opN/Kl2+SyHM+8uPb1+JxWa7e7V47X1akT4J1P7bWAhe7JZHM/K/AQAA//9T/RgHuwUAAA==
`,
	},

	"/templates/util.twig": {
		local:   "templates/util.twig",
		size:    159,
		modtime: 1526199929,
		compressed: `
H4sIAAAAAAAC/1zMvQrCMBRH8bn3Kf5kFro7CX0FdxPS2xI1HzQ30hLy7hJ00e0MP04y9mFWRq345i0Y
z2iNaBwhR+IpBuFd4DJK5hlL3LC4nWe8zLNwpo5+ZJatWEGlYertwgp9zzGc1cV+yCl6J+yTHErTcP1X
faY0NXoHAAD//6b99LqfAAAA
`,
	},

	"/": {
		isDir: true,
		local: "",
	},

	"/templates": {
		isDir: true,
		local: "templates",
	},
}
