// Code generated by "esc -o zzz_templates.go -pkg gengo templates"; DO NOT EDIT.

package gengo

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	return nil, nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/templates/datatypes.twig": {
		local:   "templates/datatypes.twig",
		size:    631,
		modtime: 1526135795,
		compressed: `
H4sIAAAAAAAC/5RSwWobMRA973zFIChI4Kw2OYRiKBRSCim0Odj00KbE6nrWVrOSFmnWjTH+9yJtmsS5
5TbSvPfmzZMG096bDeHhgI/lnTeO8HgEsG4IkVFCJTrHAirB1pEABaA1fjJscLkfKGEiwjlumYc01zq1
W3KmDnGjMyZDCoH3A10Fz/TAaBOOidbYhYidfaA17kw/UoIMOkEmjmPLeIDqKtfWb3D1JwU/Fx/bCSJW
UC1f97KEWMHxv1V6ske+/mvv7UBrO5nMJ329uLl7f9mcTwYKIS9bL60jgG70LcpduVf41cS0Nf2Xxc03
qVD+/PV7zzRDijFElZ3a7pksd6q+Tj8oBll6VSQeo8eJJYUf+16oGXrbQ3UEqPIC33MYOP+AneN6MUTr
uZPiVrxLt0LMTsU/h+gMS3HRNJdnzflZcyGUgldjnkQfJz3nkmXenE0hvchHazzRefEFCqAQC2J6JvgX
AAD//4GE16V3AgAA
`,
	},

	"/templates/example.twig": {
		local:   "templates/example.twig",
		size:    1278,
		modtime: 1526137847,
		compressed: `
H4sIAAAAAAAC/4xUT2vjOhA/W59i3hyKDYmT9vAOhkAfr7uHwraF7J6LYo9ttfbISOOlJfi7L7LdNO2G
EvBBsjTz0++P1On8WVcE+z3Mw0fWLcEwPAp5Ucq0nXUCsYqwbAVVhGJaQqUirIzU/S7NbbtyttWGW+Jn
Wvm8plYvrauWFfHq786oEqXKnnP49qLbrqH/jGsMU5zAXkWrFfzvSAuBZrC7J8oFbAlSE+TWuTD9+dqR
ivRUBdnmxOnTued+UGPLLQl42xJ0znbkxJA/dEjvQs0GcNt35GBr2eSBYGl7LgxXN1poAeRcgArs0wft
PMV4tV7/u1xfLtdXuIAwuxxnl5ioyJRjxT8bYNMEXlGn2eQxOZeoaFBRYby3TS/G8vkAV8vxOwdgoh0o
y2tHHpioALGwI8i1lzDEE97Ab+2MZjmS5/uRDnBS7LASH8uVvFfffOT5RYNPiiQThRsqg8samLxQMUdi
dodGyS5OdHwg5y3vh8PGg8u3tmb8xI4cbGDeOMH+8nRKn/SHdr7Wze32/g7BsBfSRcgnPnnLb6s4tpDa
eCD2vSMPeB1sQNBcAF7nloVeBEE7Ak/yFu3mVUW7QxS+ho8vZgpnhaFsJX1whqXh2IszXMW7JBnPed9L
10sGewwomH24Bwv8ZAtmx0Fc4KwaZofyUeDFO8kMa5EuW80vQ2pdFZZHPTKcjMIF7oyTekLgvmkWWJA+
/jHMWHPEpnO83biz4eZ3AQelBvUnAAD//+MO1XX+BAAA
`,
	},

	"/templates/structtypes.twig": {
		local:   "templates/structtypes.twig",
		size:    741,
		modtime: 1526138831,
		compressed: `
H4sIAAAAAAAC/6yRQWurQBDHz+6nGBYCGoLeAznl9uC9d2igh1LM1oy6re7KOkqC+N3LbKIpNvTU28z8
/zvzm9lGZR+qQBgGuIWpUTXCOAqh68Y6AokmsydtiuS9tUYKkSRsp0sze6FFhO1c7VzFDTj+7iTXZQSD
CIYV6Bwa5dBQevesRhEEHmchjKN/g+akc3aJgLW9NYRnEl7LrYNcY3UCba5BO/fzaYxnQmdUlTrMfce7
lNm6RkOLKs9o08fatNNcKKzn5dqRj7WVs8TptMfG1pqwbugij9NOjL4axShE3pkMwn55uQj+KteWqvrz
9P/fs6bycN8+jCB8eX27EG4AnbMu4gP38R52IEuiZpskbVZirWLrCsnSgaXFCClE4JA6Z4Bx49vAsI++
cq1/AntMonPoYbcDoytOpyFXYyhNV1Uy2rAsAv7YXyNfe/TPAAAA//8WUcTx5QIAAA==
`,
	},

	"/templates/util.twig": {
		local:   "templates/util.twig",
		size:    282,
		modtime: 1526135742,
		compressed: `
H4sIAAAAAAAC/3zPwUrEQAzG8bPzFB9z6sLSfYUVb4J6UPAgInH81lZrpmTSYil9dykWFARvIYd/fukl
vcsrMc/YxieVD2JZQvCpJ67ESiMdDa067SSJmMPZtr68vbm+b725m3peZHV+erVD9fD4PDn3oFm2XVhC
OBxw3jlNxduR8Iz4VrLWWyfu4U1bQC2DsSAe1+MRoi+Ix/RdjhAjCh0pmzF5N9XhNGjCL001/pD/SFa5
0QdTjPV/L4QlfAUAAP//tsaqKBoBAAA=
`,
	},

	"/": {
		isDir: true,
		local: "",
	},

	"/templates": {
		isDir: true,
		local: "templates",
	},
}
