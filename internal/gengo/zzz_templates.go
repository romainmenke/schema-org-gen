// Code generated by "esc -o zzz_templates.go -pkg gengo templates"; DO NOT EDIT.

package gengo

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	if !f.isDir {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is not directory", f.name)
	}

	fis, ok := _escDirs[f.local]
	if !ok {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is directory, but we have no info about content of this dir, local=%s", f.name, f.local)
	}
	limit := count
	if count <= 0 || limit > len(fis) {
		limit = len(fis)
	}

	if len(fis) == 0 && count > 0 {
		return nil, io.EOF
	}

	return fis[0:limit], nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/templates/datatypes.twig": {
		name:    "datatypes.twig",
		local:   "templates/datatypes.twig",
		size:    509,
		modtime: 1526196205,
		compressed: `
H4sIAAAAAAAC/5SRUWvyMBSGr3t+xSHwQQLaVC/kQ9jdGDjYvFB2sTkkc6ea2aQlOXWI9L+PVud0d7tr
k+d5X3hTmdXWrAkPBzx9Lr1xhE0DYF1VBkYJicgdC0gEW0cCFIDWeGvY4HxfUcRIhGPcMFdxrHVcbciZ
tAxr3TIt8i3QGSKfftqtrejdHtH2T09m0+X/UTYA3ld0FNrKdG4dAeS1X6HcdecKH0yIG1Pcz6aPUqF8
eX3bM/WQQiiDwgMkNv+R5U6lk/hMoZTdXRKI6+DxaEnh66IQqofeFpA0AMlHLP2TKWrC8Q3mjtNZFazn
XIqF+BcXQvSuw+/K4AxLMcyyUT8b9LOhUAp+1ZxDT03NeZc25s/bdNLFPlrjVc7FQ3RAJ3ZE5GD9Gr4C
AAD//ypkTbD9AQAA
`,
	},

	"/templates/example.twig": {
		name:    "example.twig",
		local:   "templates/example.twig",
		size:    1249,
		modtime: 1550931364,
		compressed: `
H4sIAAAAAAAC/5yTUWvbMBDHn61PcbuHYQ/HTvuwB0OhY90eBtsK3VsJRXHOjlr7ZKTzaDH+7kOO02Vt
CmFgsISk///ud3edLh90TTAMMC/vWLcE43gn5EUp03bWCcQqQuLSbgzX+b23jCrCqpXwE9MSKhVhbWTb
r7PStrmzrTbcEj9Q7ssttXphXb2oifPXVqgSpaqeS/jyqNuuoU/GNYYpTmBQUZ7DZ0daCDSDXd9TKWAr
kC1BaZ0L219PHalI715BcXEknWzWHEY1Sd6QgLctQedsR04M+WeF7Ed4cwG3Ky/OcD3gTd+RgxvLpsQg
UNmeA4orLZQCORdMA4fsWjtPMZ4vlx8Xy7PF8hxTCLuzaXeGiYpMNb14dwFsmpBh1Gk2ZUzOJSoaVbQx
3tumF2P5dIPzxfSdYrADEJKXp448MNEGxMKaoNRewhKPVAl+a2c0ywGorwccJmBHwIezEMMbR/EhyySd
AOzlr/4F8b8OL3juTCYIV1SFjtHA5IU2c3vN9aUJ+vsjqtfkvOVhfL74umO+2S3j+IIUuenOh7clVbSX
nINcP1c/TF32XTu/1U08y55U7KqV7NoZlobjXXjxOkmm/H/20vVSwICXpWWhR8ECtyJdkc9jm1lXY4qX
oVOwwHmKMMUXULG4PezCVYpzHljcnqy+g4ApBipBcaK4Gvdqc5fMXvuRWv29fzinq1GpUf0JAAD//1oc
+FbhBAAA
`,
	},

	"/templates/structtypes.twig": {
		name:    "structtypes.twig",
		local:   "templates/structtypes.twig",
		size:    721,
		modtime: 1550931045,
		compressed: `
H4sIAAAAAAAC/2yQT4vbMBDFz9anmAoCNhibXg0L22uh7aGHHtZLVnHGiVpbEuPJssHou5dRvG7r5jZ/
nt77aYLpfpkTwjzDUu6dGRFiVMqOwRODRtf5o3Wn+ufknVaqrkXO17BqYUKEZp1eaBADqf9XMl06hlmp
bN5B7wmCIXQM1i3VBLuosqyu4YflMwTyAYktTtCTH2+koqvuE/y9XEDELMWhO0riLv5J7y0ORwlPxZI9
z7e2wjdGcmbYE/Y3p3XV+XEU7n+nEjvt7+/eUdfBye/TjWKEF7lto9eVtO9/K/1oGcfAV/2y+UZUqr+4
DvLX7aEL+GJoOpvh8/dvX/MC8qfnw5WxBCTyVMCsspT9abBm2j5WKjskJTQPICjVYpbnSV/kr0WhMtsn
zYcHcHYQx4yQL+SkTc9VJlbL0ISA7rhw5Hpu9WPnHeMbt7pp9Zk5NHU9dWccTeXp1Oqy1Y+ClfYbxFaX
uijh8PSxea6qqiglVEX1OwAA//9wK7lN0QIAAA==
`,
	},

	"/templates": {
		name:  "templates",
		local: `templates`,
		isDir: true,
	},
}

var _escDirs = map[string][]os.FileInfo{

	"templates": {
		_escData["/templates/datatypes.twig"],
		_escData["/templates/example.twig"],
		_escData["/templates/structtypes.twig"],
	},
}
