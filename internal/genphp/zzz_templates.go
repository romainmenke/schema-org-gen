// Code generated by "esc -o zzz_templates.go -pkg genphp templates"; DO NOT EDIT.

package genphp

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	if !f.isDir {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is not directory", f.name)
	}

	fis, ok := _escDirs[f.local]
	if !ok {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is directory, but we have no info about content of this dir, local=%s", f.name, f.local)
	}
	limit := count
	if count <= 0 || limit > len(fis) {
		limit = len(fis)
	}

	if len(fis) == 0 && count > 0 {
		return nil, io.EOF
	}

	return fis[0:limit], nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/templates/load.twig": {
		name:    "load.twig",
		local:   "templates/load.twig",
		size:    218,
		modtime: 1531116733,
		compressed: `
H4sIAAAAAAAC/4zMv6qDMBSA8T1PcZYQhYs+gBcucrEq2Fb6Zz6IHvGAjWlSp5B3L61rh07f9P1+/8xk
hBhoZE0RqPN/Vezz46nEtrmW9QHb/FKpHxjY6u5GESDu6qZAhBjiTAhL95Ut4aJ7go8zJKBS1n26PnhO
zGRUJryEcbEw8kzA+l0HMnyr9XPnHLnU+40IYXO9BNLDS5ZBPAMAAP//1Bw4+NoAAAA=
`,
	},

	"/templates/structtypes.twig": {
		name:    "structtypes.twig",
		local:   "templates/structtypes.twig",
		size:    844,
		modtime: 1550423899,
		compressed: `
H4sIAAAAAAAC/3ySQW+cMBCFz/aveJWIYFG73EM37bmXHnLooVutHHYIrsC2bCN1i/zfK4ODCIl6Q55v
5r03w+cvpjOcKzGQM6IhPDYdDeK7fa45rypME/zN0CUCCAGOCPfr62h7hMCbXjj3BpWD6Wkg5R3O35xW
j2Sl6OVf8dQTJs6ZGZ962cB54WWDrNHK0x+PE/LOe3NfVW72ctT2Oa/f4FErsjvZSE53aLWFEZaUh1Tp
y+EucFaVJWco8UP6DsZqQ9ZLcmitHmKGhT2+n3pbTOEZymqWJHWNqlEjGWgl9deoP3+s8qna6CFu59JL
RSt03L4uHSij8is6hNd6s4W0n2ya0qjkvt67S2A7qsZLrfB7cxwqDpg4Y5ke4yWEteJWcMZY/jXdJ8fp
4b0LfVyouJoF2R+GM3aoOfvfcljmXnxcccJ5/RnP0eNlLRbIfCfdp4d9VswKskWBD6DB+FuB7cwDlnhz
vp/52j6PfzH6C6dtU5wYFt+bJTJLfrQKcVDNWeCB/wsAAP//88szgEwDAAA=
`,
	},

	"/templates/util.twig": {
		name:    "util.twig",
		local:   "templates/util.twig",
		size:    639,
		modtime: 1550424314,
		compressed: `
H4sIAAAAAAAC/3yRQU7DMBBF155TzCJSUqmcILRwAxZdIhQZd0pcJbZlj1EL6t1RHDclJWI7efP95+Xx
ybUOwMiegpOKcKda6uWL/6gBDtEo1tbgMVjTBPJadvqLKiw+ZRcJV/gNQh+wQuodn3/N0xfhiaM3NYgL
gChsZNyg9F6eq1UNeVOHZhzdLx+sJ6naaS4DFtrs6YSbLRbUUU+GMztG9cSt3Td00oFDNTFrLIf+u2v9
cnpCpFKNk35oduUftjN86Dqg0QTialp4LZ+VNUwnLt/SNUKIdEjjYhha28hrvOWPKRekLlB+fAGfzhpp
EEldFpmgbPPqzr4fSfEfeYs+EvKPjfyHRm7RQipzE3HnYKnnLLOGOXGBnwAAAP//SQB/Rn8CAAA=
`,
	},

	"/templates": {
		name:  "templates",
		local: `templates`,
		isDir: true,
	},
}

var _escDirs = map[string][]os.FileInfo{

	"templates": {
		_escData["/templates/load.twig"],
		_escData["/templates/structtypes.twig"],
		_escData["/templates/util.twig"],
	},
}
